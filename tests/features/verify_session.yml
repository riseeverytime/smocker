name: Use and verify resticted mocks
version: "2"
testcases:
  - name: Use restricted mocks
    steps:
      - type: http
        method: POST
        url: http://localhost:8081/reset
      - type: http
        method: POST
        url: http://localhost:8081/mocks
        headers:
          Content-Type: "application/x-yaml"
        bodyFile: ../data/restricted_mock_list.yml
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "Mocks registered successfully"

      # 'test' and 'test2' should match 1 times each
      # 'test2' is loaded after 'test' so it will come out first
      - type: http
        method: GET
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test2
      - type: http
        method: GET
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test

      # 'test3' should match 2 times
      - type: http
        method: POST
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test3
      - type: http
        method: POST
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test3

      # 'test4' should match any times
      - type: http
        method: PUT
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test4
      - type: http
        method: PUT
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test4
      - type: http
        method: PUT
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test4

      # The mocks should be verified
      - type: http
        method: POST
        url: http://localhost:8081/verify
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.mocks.verified ShouldBeTrue
          - result.bodyjson.mocks.all_used ShouldBeTrue
          - result.bodyjson.mocks.message ShouldEqual "All mocks match expectations"
          - result.bodyjson.history.verified ShouldBeTrue
          - result.bodyjson.history.message ShouldEqual "History is clean"

      # We add an extra call to 'test'/'test2' wich should failed because call times was exceeded
      - type: http
        method: GET
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 666
          - result.bodyjson.message ShouldEqual "Matching mock found but was exceeded"
          # both 'test' and 'test2' would have both matched if they had not exceeded their times count.
          - result.bodyjson.nearest.__len__ ShouldEqual 2

      # After the extra call the expectations should failed
      - type: http
        method: POST
        url: http://localhost:8081/verify
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.mocks.verified ShouldBeFalse
          - result.bodyjson.mocks.all_used ShouldBeTrue
          - result.bodyjson.mocks.message ShouldEqual "Some mocks don't match expectations"
          - result.bodyjson.mocks.failures.__len__ ShouldEqual 2
          - result.bodyjson.history.verified ShouldBeFalse
          - result.bodyjson.history.failures.__len__ ShouldEqual 1

      # We add an extra unused mocks
      - type: http
        method: POST
        url: http://localhost:8081/mocks
        headers:
          Content-Type: "application/x-yaml"
        body: >
          - request:
              method: GET
              path: /test
            response:
              status: 200
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "Mocks registered successfully"

      # After that there should be an unused mocks
      - type: http
        method: POST
        url: http://localhost:8081/verify
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.mocks.message ShouldEqual "Some mocks don't match expectations"
          - result.bodyjson.mocks.all_used ShouldBeFalse
          - result.bodyjson.mocks.unused.__len__ ShouldEqual 1
