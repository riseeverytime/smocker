name: Use mocks to respond
version: "2"
testcases:
  - name: Don't register mocks
    steps:
      - type: http
        method: POST
        url: http://localhost:8081/reset
      - type: http
        method: GET
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 666

  - name: Use basic mock
    steps:
      - type: http
        method: POST
        url: http://localhost:8081/reset
      - type: http
        method: POST
        url: http://localhost:8081/mocks
        bodyFile: ../data/basic_mock.yml
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "Mocks registered successfully"
      - type: http
        method: GET
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test

  - name: Use basic mock list
    steps:
      - type: http
        method: POST
        url: http://localhost:8081/reset
      - type: http
        method: POST
        url: http://localhost:8081/mocks
        bodyFile: ../data/basic_mock_list.yml
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "Mocks registered successfully"
      - type: http
        method: GET
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test
      - type: http
        method: POST
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test2
      - type: http
        method: DELETE
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test3
      - type: http
        method: GET
        url: http://localhost:8080/test?foo=bar&foo=baz
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test4
      - type: http
        method: GET
        url: http://localhost:8080/test
        headers:
          X-Custom-Header: bar
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test5

  - name: Use matcher mock list
    steps:
      - type: http
        method: POST
        url: http://localhost:8081/reset
      - type: http
        method: POST
        url: http://localhost:8081/mocks
        bodyFile: ../data/matcher_mock_list.yml
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "Mocks registered successfully"
      - type: http
        method: GET
        url: http://localhost:8080/any
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test
      - type: http
        method: POST
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test2
      - type: http
        method: DELETE
        url: http://localhost:8080/test
        body: >
          {"id": 1}
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test3
      - type: http
        method: PUT
        url: http://localhost:8080/test
        headers:
          Content-Type: application/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test4
      - type: http
        method: PATCH
        url: http://localhost:8080/test?test=true&test2=test3
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test5
      - type: http
        method: GET
        url: http://localhost:8080/test6
        body: "notEmpty"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test7
      - type: http
        method: GET
        url: http://localhost:8080/test8?test=trueeeeee
        body: "notEmpty"
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test9
      - type: http
        method: POST
        url: http://localhost:8080/test10
        body: >
          { "key1": "test" }
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual test11
      - type: http
        method: POST
        url: http://localhost:8080/test10
        body: >
          { "key1": "test2" }
        assertions:
          - result.statuscode ShouldEqual 666

  - name: Use dynamic mock list
    steps:
      - type: http
        method: POST
        url: http://localhost:8081/reset
      - type: http
        method: POST
        url: http://localhost:8081/mocks
        bodyFile: ../data/dynamic_mock_list.yml
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "Mocks registered successfully"
      - type: http
        method: GET
        url: http://localhost:8080/test
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "request path /test"
      - type: http
        method: GET
        url: http://localhost:8080/test2
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "request path /test2"
      - type: http
        method: GET
        url: http://localhost:8080/test3
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "request path /test3"
      - type: http
        method: GET
        url: http://localhost:8080/test4
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "request path /test4"
      - type: http
        method: GET
        url: http://localhost:8080/test5
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "request path /test5"
      - type: http
        method: GET
        url: http://localhost:8080/test6
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "request path /test6"

  - name: Use proxy mock list
    steps:
      - type: http
        method: POST
        url: http://localhost:8081/reset
      - type: http
        method: POST
        url: http://localhost:8081/mocks
        bodyFile: ../data/proxy_mock_list.yml
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.message ShouldEqual "Mocks registered successfully"
      - type: http
        method: GET
        url: http://localhost:8080/posts/1
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.id ShouldEqual 1
          - result.bodyjson.body ShouldNotBeBlank
          - result.bodyjson.title ShouldNotBeBlank
      - type: http
        method: GET
        url: http://localhost:8080/todos?userId=1
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.__len__ ShouldEqual 20
      - type: http
        method: GET
        url: http://localhost:8080/redirect-to?url=https%3A%2F%2Fsmocker.dev%2F&status_code=302
        no_follow_redirect: true
        assertions:
          - result.statuscode ShouldEqual 302
          - result.headers.location ShouldEqual https://smocker.dev/
      - type: http
        method: GET
        url: http://localhost:8080/redirect-to?url=https%3A%2F%2Fhttpbin.org%2Fget&status_code=302
        headers:
          X-Follow-Redirect: "true"
          User-Agent: "foobar"
        no_follow_redirect: true
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson.url ShouldEqual http://httpbin.org/get
